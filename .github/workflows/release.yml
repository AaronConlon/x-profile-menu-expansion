name: Build and Release Extension

on:
  push:
    branches:
      - main

permissions:
  contents: write
  packages: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install crx3 CLI
        run: npm install -g crx3

      - name: Extract version from manifest
        id: version
        run: |
          echo "Extracting version from manifest.json..."
          if [ ! -f "manifest.json" ]; then
            echo "Error: manifest.json not found!"
            exit 1
          fi
          
          VERSION=$(node -p "require('./manifest.json').version")
          if [ -z "$VERSION" ]; then
            echo "Error: Failed to extract version from manifest.json!"
            exit 1
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "‚úì Extension version: $VERSION"

      - name: Get latest release version
        id: latest_release
        run: |
          echo "Getting latest release version..."
          LATEST_VERSION=$(gh release list --limit 1 --json tagName --jq '.[0].tagName' 2>/dev/null || echo "")
          
          if [ -n "$LATEST_VERSION" ]; then
            # Remove 'v' prefix if present
            LATEST_VERSION=${LATEST_VERSION#v}
            echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
            echo "üìã Latest release version: $LATEST_VERSION"
          else
            echo "latest_version=" >> $GITHUB_OUTPUT
            echo "üìã No previous releases found"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if build is needed
        id: check_build
        run: |
          CURRENT_VERSION="${{ steps.version.outputs.version }}"
          LATEST_VERSION="${{ steps.latest_release.outputs.latest_version }}"
          
          echo "Current manifest version: $CURRENT_VERSION"
          echo "Latest release version: $LATEST_VERSION"
          
          if [ -z "$LATEST_VERSION" ]; then
            echo "build_needed=true" >> $GITHUB_OUTPUT
            echo "üèóÔ∏è Build needed: No previous releases found"
          elif [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
            echo "build_needed=true" >> $GITHUB_OUTPUT
            echo "üèóÔ∏è Build needed: Version changed from $LATEST_VERSION to $CURRENT_VERSION"
          else
            echo "build_needed=false" >> $GITHUB_OUTPUT
            echo "‚è≠Ô∏è Build skipped: Version $CURRENT_VERSION already released"
          fi

      - name: Generate private key for CRX signing
        if: steps.check_build.outputs.build_needed == 'true'
        run: |
          echo "Generating private key for CRX signing..."
          openssl genrsa -out key.pem 2048
          
          if [ -f "key.pem" ]; then
            echo "‚úì Private key generated successfully"
          else
            echo "‚úó Failed to generate private key!"
            exit 1
          fi

      - name: Verify required files exist
        if: steps.check_build.outputs.build_needed == 'true'
        run: |
          echo "Checking required files..."
          for file in manifest.json content.js styles.css; do
            if [ ! -f "$file" ]; then
              echo "Error: Required file $file not found!"
              exit 1
            else
              echo "‚úì Found $file"
            fi
          done
          
          if [ ! -d "image" ]; then
            echo "Error: Required directory 'image' not found!"
            exit 1
          else
            echo "‚úì Found image directory"
            ls -la image/
          fi

      - name: Build CRX file
        if: steps.check_build.outputs.build_needed == 'true'
        run: |
          echo "Creating build directory..."
          mkdir -p build

          echo "Copying extension files..."
          cp manifest.json build/
          cp content.js build/
          cp styles.css build/
          cp -r image build/
          
          echo "Build directory contents:"
          ls -la build/

          echo "Building CRX file..."
          crx3 build build --key-path key.pem --output x-profile-menu-extension-v${{ steps.version.outputs.version }}.crx

          echo "Verifying CRX file was created..."
          if [ -f "x-profile-menu-extension-v${{ steps.version.outputs.version }}.crx" ]; then
            echo "‚úì CRX file created successfully"
            ls -la *.crx
          else
            echo "‚úó CRX file creation failed!"
            exit 1
          fi

      - name: Create source ZIP
        if: steps.check_build.outputs.build_needed == 'true'
        run: |
          echo "Creating source ZIP..."
          zip -r x-profile-menu-extension-source-v${{ steps.version.outputs.version }}.zip . -x "*.git*" "*node_modules*" "*.crx" "key.pem" "build/*"
          
          if [ -f "x-profile-menu-extension-source-v${{ steps.version.outputs.version }}.zip" ]; then
            echo "‚úì Source ZIP created successfully"
            ls -la *.zip
          else
            echo "‚úó Source ZIP creation failed!"
            exit 1
          fi

      - name: Create Release
        if: steps.check_build.outputs.build_needed == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: X Profile Menu Extension v${{ steps.version.outputs.version }}
          body: |
            ## X/Twitter Profile Links Extension v${{ steps.version.outputs.version }}

            ### Installation
            1. Download the `x-profile-menu-extension-v${{ steps.version.outputs.version }}.crx` file
            2. Open Chrome/Edge and go to `chrome://extensions/` or `edge://extensions/`
            3. Enable "Developer mode"
            4. Drag and drop the CRX file to install

            ### Features
            - Adds hover menu to profile links on X.com
            - Modal popup functionality for quick profile browsing
            - Resizable modal window
            - Keyboard navigation support

            **Note**: This release was automatically generated when manifest.json was updated.
          files: |
            x-profile-menu-extension-v${{ steps.version.outputs.version }}.crx
            x-profile-menu-extension-source-v${{ steps.version.outputs.version }}.zip
          draft: false
          prerelease: false

      - name: Build skipped
        if: steps.check_build.outputs.build_needed == 'false'
        run: |
          echo "‚úÖ Build and release skipped - version ${{ steps.version.outputs.version }} already released."
